package com.java.classe.basica;

//

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.ArrayList;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : @JDBC
//  @ File Name : DaoSql.java
//  @ Date : @06/08/2016
//  @ Author : @Paulinho
//
//

public class DaoSql {
    /*Driver e url mysql/postgresql*/
    private String driverSql = null; 
    private String url = null;
    private String login = null;
    private String senha = null;
    private String sql = null;
    
    /* Conexão com o banco */
    protected Connection conn;
    private Statement  st;
    private ResultSet  rs;
    private PreparedStatement prst = null;
    
    /*Coleção de dados para o cursor de saida*/
    private List<Pessoa> cursorPe;
    private List<Enderecos> cursorEnd;
    private List<Contato> cursorCo;
    private Pessoa ps;
    private Contato co;
    private Enderecos ed;
    
    /*Classe para said padrão de informação.*/
    private EntradaPadrao in = null;
    
    public DaoSql(String sql, char banco){
        this.sql = sql;
     if ( banco == 'M' ) { // Mysql
         
         this.driverSql = "com.mysql.jdbc.Driver";
         this.url = "jdbc:mysql://172.17.0.2:3306/db_igreja_adv";
         this.login = "root";
         
     }
     
     if ( banco == 'P' ){ // Postgresql
         
         this.driverSql = "org.postgresql.Driver";
         this.url = "jdbc:postgresql://172.17.0.2:5432/db_igreja_adv";
         this.login = "postgres";
         this.senha = "J0ra@40";
     }
     this.getConexao();
        
    }
    protected void getConexao(){
        try {
            Class.forName(driverSql);
            conn = DriverManager.getConnection(url, login, senha); // Abre a conexão
            st = conn.createStatement(); // Cria os comandos sql

        } catch (ClassNotFoundException ex) {
            System.out.println("Erro ao conectar com o banco." + ex.getMessage());
        } catch (SQLException ex) {
            System.out.println("Erro ao executar os comandos sql!" + ex.getMessage());
        }
    }
    public int getSquencia(){
        int numLinha = 0;
        
        try {
            rs = st.executeQuery("select count(*) + 1 as contagem from pessoa");
        while (rs.next()){
            numLinha = rs.getInt("contagem");
        }    
        } catch (SQLException ex) {
            System.out.println("Erro ao executar os comandos sql!" + ex.getMessage());
        }
        return numLinha;
    }
    
    public int getSeqArq(){
        int numSeqArq = 0;
        try {
            prst = conn.prepareStatement(" select max(num_seq_arq) as num_seq "
                                          + "from public.controle_arquivo ");
            rs = prst.executeQuery();
        while (rs.next()){
            numSeqArq = rs.getInt("num_seq");
        }
        rs.close();
        prst.close();
        conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao executar os comandos sql!" + ex.getMessage());
        }
        return numSeqArq;
    }
    
    public String getMatricula(){
    String vNumMatric = "0";
    
    try {
        if (conn.isClosed()){
           this.getConexao();
        }
        rs = st.executeQuery("select max(lpad(cast(idpessoa AS varchar),3,'0')) as matricula from pessoa");  
         while(rs.next()) {
            if (!rs.getString(1).equals("")){
                vNumMatric = rs.getString(1);
            } else {
                vNumMatric = "-1";
            }
        }
    } catch (SQLException ex){
        System.out.println("Erro ao recuperar a matricula: "+ ex.getMessage());
    } catch (Throwable e){
       vNumMatric = "000"; 
    }
        return vNumMatric;
    } 
    public List<Pessoa> getComboInfo(){
        cursorPe = new ArrayList<>();
        try {
            prst = conn.prepareStatement(" select * from public.ret_cbo_info() ");
            rs = prst.executeQuery();
            
            while (rs.next())
            {
                ps = new Pessoa();
                
                ps.setReligiao(rs.getString("nom_religiao"));
                cursorPe.add(ps);
            }
            rs.close();
            prst.close();
            conn.close();
        } catch(SQLException ex){
            System.out.println("Erro ao recuperar a lista de religião." + ex.getMessage());  
        }
        
        return cursorPe;
    }
    public String importaArquivo(String pCaminhoArq){
       String vRetorno = ""; 
        try {
          
          prst = conn.prepareStatement(" select func_import_arq('"+pCaminhoArq+"') ");
          rs = prst.executeQuery();
          
          while(rs.next()){
             vRetorno = rs.getString(1);
          }
          
          rs.close();
          prst.close();
          conn.close();
        } catch(SQLException ex ){
            System.out.println("Erro ao importar o arquivo! " + ex.getMessage());
        }
        
     return vRetorno;
    }
    
    public int consultaLogin(Login p_login){
     int vRetorno = 0; 
        try {
          
          prst = conn.prepareStatement(" select public.func_trata_login(?,?) ");
          prst.setString(1, p_login.getvNomeUsuario().toUpperCase());
          prst.setString(2, p_login.getvTxtSenha());
          rs = prst.executeQuery();
          
          while(rs.next()){
             vRetorno = rs.getInt(1);
          }
          rs.close();
          prst.close();
          conn.close();
        } catch(SQLException ex ){
            System.out.println("Erro ao consultar o login! " + ex.getMessage());
        }
        
     return vRetorno;
        
    }
    
    public int insereUsuario(Login p_login){
     int vRetorno = 0; 
        try {
          
          prst = conn.prepareStatement(" select public.func_trata_usuario(?,?,?) ");
          prst.setString(1, p_login.getvNomeUsuario());
          prst.setString(2, p_login.getvTxtSenha());
          prst.setString(3, p_login.getvIndTipoUsuario());
          rs = prst.executeQuery();
          
          while(rs.next()){
             vRetorno = rs.getInt(1);
          }
          rs.close();
          prst.close();
          conn.close();
        } catch(SQLException ex ){
            System.out.println("Erro ao consultar o login! " + ex.getMessage());
        }
     return vRetorno;
    }
            
    public List<Pessoa> sqlConsulta() {
        cursorPe = new ArrayList<>();
        try {
            if (conn.isClosed()){
                this.getConexao();
            }
            rs = st.executeQuery(sql); // Criar a saida dos comandos sql
        while (rs.next())
        {
            ps = new Pessoa();
            ps.setId(rs.getInt("idpessoa"));
            ps.setNome(rs.getString("nome_pessoa"));
            ps.setAniversario(rs.getString("mes_ano_aniversario"));
            ps.setReligiao(rs.getString("religiao"));
            ps.setResponsavel(rs.getString("responsavel"));
            ps.setObservacao(rs.getString("obs"));
            ps.setPrograma(rs.getString("prog_estudo"));
            ps.setIndEstudo(rs.getString("ind_estudo").charAt(0));
            ps.setContador(rs.getRow());
            ps.setFxEtaria(rs.getString("faixa_etaria"));
            ps.setOrigem(rs.getString("txt_origem"));
            cursorPe.add(ps);
            
        } 
        
        /*Fechando as conexões*/
        rs.close();
        st.close();
        conn.close();
        
        }  catch (SQLException ex) {
            System.out.println("Erro ao executar os comandos sql!" + ex.getMessage());
        }
        return cursorPe;
    
    }
    
    public List<Enderecos> sqlConsultaEnd() {
        cursorEnd = new ArrayList<>();
        
        try {
            if (conn.isClosed()){
                this.getConexao();
            }
            rs = st.executeQuery(sql); // Criar a saida dos comandos sql
        while (rs.next())
        {
            ed = new Enderecos();
            ed.setCodEndereco(rs.getInt("cod_endereco"));
            ed.setCep(rs.getString("cep"));
            ed.setEndereco(rs.getString("endereco"));
            ed.setBairro(rs.getString("bairro"));
            ed.setCidade((rs.getString("cidade")));
            ed.setCod_rua(rs.getInt("cod_rua"));
            ed.setTxt_complamento(rs.getString("txt_complemento"));
            cursorEnd.add(ed);
            
        } 
        
        /*Fechando as conexões*/
        rs.close();
        st.close();
        conn.close();
        
        }  catch (SQLException ex) {
            System.out.println("Erro ao executar os comandos sql!" + ex.getMessage());
        }
        return cursorEnd;
    
    }
    
    public List<Contato> sqlConsultaCo() {
        cursorCo = new ArrayList<>();
        try {
            if (conn.isClosed()){
                this.getConexao();
            }
            rs = st.executeQuery(sql); // Criar a saida dos comandos sql
        while (rs.next())
        {
            co = new Contato();
            co.setIdContato(rs.getInt("idcontato"));
            co.setDtContato(rs.getString("dt_contato"));
            co.setNumCelular(rs.getString("num_celular"));
            co.setNumFixo(rs.getString("num_fixo"));
            co.setIndZap(rs.getString("ind_zap").charAt(0));
            co.setNomeOperadora(rs.getString("operadora"));
            co.setEndEmail(rs.getString("email"));
            ps.setContador(rs.getRow());
            cursorCo.add(co);
        } 
        
        /*Fechando as conexões*/
        rs.close();
        st.close();
        conn.close();
        
        } catch (SQLException ex) {
            System.out.println("Erro ao executar os comandos sql!" + ex.getMessage());
        }
        return cursorCo;
    
    }
    
    public boolean sqlInsere( Pessoa ps, Enderecos ed, Contato co) {
        
        try {
            
            /*Preenche os dados pessoais*/
            
            /*Endereço*/
            prst = conn.prepareStatement(this.insertEndereco());
            prst.setInt(1, ed.getCodEndereco());
            prst.setString(2, ed.getCep());
            prst.setString(3, ed.getEndereco());
            prst.setString(4, ed.getBairro());
            prst.setString(5, ed.getCidade());
            prst.setInt(6, ed.getCod_rua());
            prst.setString(7, ed.getTxt_complamento());
            prst.execute();
            
            /*Contato*/
            prst = conn.prepareStatement(this.insertContato());
            prst.setInt(1, co.getIdContato());
            prst.setString(2, co.getDtContato());
            prst.setString(3, co.getNumCelular());
            prst.setString(4, co.getNumFixo());
            prst.setString(5, Character.toString(co.getIndZap()));
            prst.setString(6, co.getNomeOperadora());
            prst.setString(7, co.getEndEmail());
            prst.execute();
            
            /*Pessoa*/
            prst = conn.prepareStatement(this.insertPessoa());
            prst.setInt(1, ps.getId() + 1);
            prst.setInt(2, ps.getContato_id());
            prst.setInt(3, ps.getEndereco_id());
            prst.setString(4, ps.getNome());
            prst.setString(5, ps.getAniversario());
            prst.setString(6, ps.getReligiao());
            prst.setString(7, ps.getResponsavel());
            prst.setString(8, ps.getObservacao());
            prst.setString(9, ps.getPrograma());
            prst.setString(10, Character.toString(ps.getIndEstudo()));
            prst.setString(11, ps.getFxEtaria());
            prst.setString(12, ps.getOrigem());
            /*Fecha a conexão com o banco*/
            prst.execute();
            prst.close();
            conn.close();
        } catch (SQLException ex) {
            System.out.println("Exceção gerada pelo Banco! " + ex.getMessage());
            return false;
        }
        return true;
    }
    

    public boolean sqlAtualiza(Pessoa p, Enderecos ed, Contato co){
        
        try {
            /*Atualiza dados pessoais.*/   
            prst = conn.prepareStatement(this.updatePessoa());   
            prst.setString(1, p.getNome());
            prst.setString(2, p.getAniversario());
            prst.setString(3, p.getReligiao());
            prst.setString(4, p.getResponsavel());
            prst.setString(5, p.getObservacao());
            prst.setString(6, p.getPrograma());
            prst.setString(7, Character.toString(p.getIndEstudo()));
            prst.setString(8, p.getFxEtaria());
            prst.setString(9, p.getOrigem());
            prst.setInt(10, p.getId());
            prst.execute();

            /*Atualiza endereços.*/
            prst = conn.prepareStatement(this.updateEnderecos());
            prst.setString(1, ed.getCep());
            prst.setString(2, ed.getEndereco());
            prst.setString(3, ed.getBairro());
            prst.setString(4, ed.getCidade());
            prst.setInt(5, ed.getCod_rua());
            prst.setString(6, ed.getTxt_complamento());
            prst.setInt(7, ed.getCodEndereco());
            prst.execute();

            /*Atualiza contatos.*/
            prst = conn.prepareStatement(this.updateContato());
            prst.setString(1, co.getNumCelular());
            prst.setString(2, co.getNumFixo());
            prst.setString(3, Character.toString(co.getIndZap()));
            prst.setString(4, co.getNomeOperadora());
            prst.setString(5, co.getEndEmail());
            prst.setInt(6, co.getIdContato());
         
            prst.execute();
            prst.close();
            conn.close();
        } catch (SQLException ex) {
            System.out.println("Exceção gerada pelo Banco! " + ex.getMessage());
            return false;  
        }

    return true;
        
    }

    public boolean sqlDeleta(int codEndereco, int idContato, int idPessoa){
        
        try {

            /*Deleta dados pessoais.*/   
            prst = conn.prepareStatement(this.deletePessoa());   
            prst.setInt(1, idPessoa);
            prst.execute();

            /*Deleta endereços.*/
            prst = conn.prepareStatement(this.deleteEnderecos());
            prst.setInt(1, codEndereco);
            prst.execute();
            
            /*Deleta contatos.*/
            prst = conn.prepareStatement(this.deleteContato());
            prst.setInt(1, idContato);
            prst.execute();
            
            prst.close();
            conn.close();
        } catch (SQLException ex) {
            System.out.println("Exceção gerada pelo Banco! " + ex.getMessage());
            return false;  
        }

    return true;
        
    }
       
    private String insertPessoa(){
        String sqlInsert = "insert into pessoa "
                         + "(idpessoa, contato_idcontato, enderecos_cod_endereco"
                         + ", nome_pessoa, mes_ano_aniversario"
                         + ", religiao, responsavel, obs, prog_estudo, ind_estudo"
                         + ", faixa_etaria, txt_origem)"
                         + " values (?,?,?,?,to_date(?,'dd/mm'),?,?,?,?,?,?,?)";
        return sqlInsert;
    }
    
    private String insertEndereco(){
      String sqlInsert = "insert into enderecos "
                       + "(cod_endereco, cep, "
                       + " endereco, bairro, cidade, "
                       + " cod_rua, txt_complemento) "
                       + " values(?,?,?,?,?,?,?) ";  
     return sqlInsert; 
    }
    
    private String insertContato(){
      String sqlInsert = "insert into contato "
                       + "(idcontato, dt_contato, "
                       + "num_celular, num_fixo, "
                       + "ind_zap, operadora, email)"
                       + " values(?,to_date(?,'dd/mm/yyyy'),?,?,?,?,?) ";  
     return sqlInsert; 
    }
    
    private String updatePessoa(){
     String sqlUpdate = "update pessoa set nome_pessoa = ?"
             + ", mes_ano_aniversario = to_date(?,'dd/mm/yyyy'), religiao = ?"
             + ", responsavel = ?, obs = ?, prog_estudo = ?"
             + ", ind_estudo = ?, faixa_etaria = ?, txt_origem = ?"
             + "  where idpessoa = ?";
        
     return sqlUpdate;
    }

    private String updateEnderecos(){
     String sqlUpdate = "update enderecos set cep = ?"
             + ", endereco = ?, bairro = ?"
             + ", cidade = ?, cod_rua = ?"
             + ", txt_complemento = ?"
             + "  where cod_endereco = ?";
        
     return sqlUpdate;
    }

    private String updateContato(){
     String sqlUpdate = "update contato set num_celular = ?"
             + ", num_fixo = ?, ind_zap = ?"
             + ", operadora = ?, email = ?"
             + "  where idcontato = ?";
        
     return sqlUpdate;
    }

    private String deletePessoa(){
     String sqlDelete = "delete from pessoa where idpessoa = ?";   
        
     return sqlDelete;
        
    }
    
    private String deleteEnderecos(){
     String sqlDelete = "delete from enderecos where cod_endereco = ?";   
        
     return sqlDelete;
        
    }
    
    private String deleteContato(){
     String sqlDelete = "delete from contato where idcontato = ?";   
        
     return sqlDelete;
        
    }
}
